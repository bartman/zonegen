#!/usr/bin/perl -w
use strict;
use warnings;
use Pod::Usage;
use Getopt::Long;
use Parse::RecDescent;
use Data::Dumper;
use Date::Format;
use POSIX qw( EXIT_SUCCESS EXIT_FAILURE );

# ------------------------------------------------------------------------
# program help in POD format
#
=head1 NAME

zonegen - domain zone generator

=head1 SYNTAX

    zonegen [--selector <selector>] [--output <output-file>] <input-file>
    zonegen --help

=head1 SYNOPSIS

    # process metazone file, generate zone file
    zonegen example.com.metazone

    # use a multi-view selector
    zonegen --selector int example.com.metazone

    # output to a different file
    zonegen --output example.com.zone example.com.metazone

=cut

# ------------------------------------------------------------------------
# general helper functions

my $debug = 0;
sub dbg {
        my $txt = "@_";
        chomp $txt;
        warn "# $txt\n" if $debug;
}

sub assert_root {
        my $txt = join(' ', @_);
        dbg "your uid is $>";
        if ($> ne 0) {
                die "You need to be root"
                    . (length($txt)==0 ? "." : " $txt")
                    . "\n";
        }
}

# ------------------------------------------------------------------------
#
package MetaZone;
use Date::Format;
use subs qw(dbg);
*dbg = \&::main::dbg;

sub new {
        my $class = shift;
        my $this = {};
        bless $this, $class;
        return $this;
}

my %VARS;
my %RULES;
my %PASS;
use vars qw{%VARS %RULES @PASS};

my $grammar = <<'_EOGRAMMAR_';
        start       : statement
                        { if (length($text)) { warn "parsing error at: $text\n"; return } }

        statement   : l_assign
                    | l_rule
                    | l_pass

        l_assign    : VAR_NAME '=' string
                        { my ($name, $val) = ($item{VAR_NAME}, $item{string});
                          main::dbg("## assign: $name = $val");
                          $MetaZone::VARS{$name} = $val;
                          1 }

        l_rule      : rule_name ':' rule_defns
                        { my ($name, @defn) = ($item{rule_name}, @{$item{rule_defns}});
                          main::dbg("## rule: $name : @defn");
                          $MetaZone::RULES{$name} = [] if not defined $MetaZone::RULES{$name};
                          push @{$MetaZone::RULES{$name}}, @defn;
                          1 }

        l_pass      : '!' /.*/
                        { my ($rest) = ($item[2]);
                          main::dbg("## pass: $rest");
                          push @MetaZone::PASS, $rest;
                          1 }

        rule_name   : SPECIAL_RULE
                    | DOMAIN_NAME

        rule_defns  : rule_defn(s)

        rule_defn   : SELECTOR '=' rule_word
                        { "$item[1]=$item[3]" }
                    | rule_word

        rule_word   : IPv6
                    | IPv4
                    | DOMAIN_NAME

        string      : /\S+/

        VAR_NAME    : /\w[a-z0-9_]*/i

        SPECIAL_RULE : '@mx' | '@ns'

        SELECTOR    : /[a-z]+/i

        DOMAIN_NAME : /[a-z0-9.-]+/i

        IPv4        : /\d+\.\d+\.\d+\.\d+/

        IPv6        : /([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4}/

_EOGRAMMAR_

sub readfile {
        my ($file) = @_;

        open(IN, "<$file") or die "failed to open '$file' for reading\n";
        my @data = <IN>;
        close(IN);

        # remove comments, strip CRs, etc
        return map { 
            chomp;
            $_ =~ s/#.*$//;
            $_ =~ s/^\s*//;
            $_ =~ s/\s*$//;
            $_
        } @data;
}

sub parse {
        my $self = shift;
        my ($file) = @_;

        dbg "reading from $file";

        my @data = readfile($file);

        my $parser=Parse::RecDescent->new($grammar);

        my $lno=0;
        for my $line (@data) {
                $lno++;

                next if $line =~ /^\s*$/;

                dbg "line $lno: $line";

                my $rc = $parser->start($line);
                defined $rc or die "parsing failed on line $lno";
        }

        $self->{vars}  = \%MetaZone::VARS;
        $self->{rules} = \%MetaZone::RULES;
        $self->{pass}  = \@MetaZone::PASS;

        # only domain is manditory
        $self->{vars}->{domain} || die "domain not specified in $file.";

        $self->cleanupvars
}

sub cleanupvars {
        my $self = shift;

        # must have domain, and it shold have no dots at the end
        $self->{vars}->{domain} || die "domain not specified.";
        $self->{vars}->{domain} =~ s/\.*$//;

        # origin, if not specified is set to domain, it will have a trailing dot
        $self->{vars}->{origin} = $self->{vars}->{domain} if not defined $self->{vars}->{origin};
        $self->{vars}->{origin} =~ s/\.*$/./;

        # email, set to root@domain, no trailing dot
        $self->{vars}->{email} = 'root@' . $self->{vars}->{domain} if not defined $self->{vars}->{email};
        $self->{vars}->{email} =~ s/\.*$//;
}

sub get_timestamp {
        my $self = shift;

        if (not defined $self->{vars}->{timestamp}) {
                # generate a time stamp, with a 15min accuracy
                my $now = time;
                my $today = time2str("%Y%m%d", $now);
                my $seq = 0;

                if (defined $self->{old_timestamp}) {
                        my $old = 0;
                        if ($self->{old_timestamp} =~ m/^$today(\d\d)$/) {
                                $old = $1;
                        }
                        $seq = $old + 1;
                } else {
                        my ($sec,$min,$hour,@rest) = localtime($now);
                        $seq = ((($hour * 60) + $min) * 100) / (24 * 60);
                }

                $self->{vars}->{timestamp} = sprintf("$today%02d", $seq);
        }

        return $self->{vars}->{timestamp}
}

sub get_rule_names {
        my $self = shift;
        return sort keys %{$self->{rules}};
}

sub get_rule {
        my $self = shift;
        my ($host) = @_;

        my $selector = $self->{selector};

        my @res;
        foreach my $_fld (@{${$self->{rules}}{$host}}) {
                my $fld = $_fld; # avoid modifying the original array
                if ($fld =~ m/=/) {
                        next if $fld !~ m/^$selector=(.*)$/;
                        $fld = $1
                }
                push @res, $fld;
        } 
        return @res;
}

sub get_no_cname_hosts_map {
        my $self = shift;

        my %res;
        foreach my $host ($self->get_rule_names) {
                next if ($host !~ m/@/);
                foreach my $fld ($self->get_rule($host)) {
                        if ($fld =~ m/\d+\.\d+\.\d+\.\d/) {
                                warn "$host points at IPv4 $fld\n";
                        } elsif ($fld =~ m/([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4}/) {
                                warn "$host points at IPv6 $fld\n";
                        } else {
                                dbg "$host -> $fld, not used for CNAME";
                                $res{$fld} = 1;
                        }
                }
        }
        return %res;
}

sub get_primary_ns {
        my $self = shift;

        if (not defined $self->{vars}->{primary_ns}) {
                # if one was not given, try to find the first @ns entry
                my $prins = ($self->get_rule('@ns'))[0];

                # if no trailing ., append origin
                if ($prins !~ m/\.$/) {
                        my $orig = $self->{vars}->{origin};
                        $prins .= ".$orig";
                }

                $self->{vars}->{primary_ns} = $prins;
        }

        return $self->{vars}->{primary_ns}
}

sub dump {
        my $self = shift;

        print "-- variables --\n";
        while ( my ($key, $value) = each %{$self->{vars}} ) {
                printf "  %20s = %s\n", $key, $value;
        }

        print "-- rules --\n";
        while ( my ($key, $value) = each %{$self->{rules}} ) {
                printf "  %20s = %s\n", $key, join(' ', @{$value});
        }
}

sub read_old_timestamp {
        my $self = shift;

        my $file = $self->{output_file};
        -f $file || return;

        my $data;
        {
                local $/=undef;
                open(IN, "<$file") or die "failed to open '$file' for reading\n";
                binmode IN;
                $data = <IN>;
                close(IN);
        }

        # try to find something that looks like the old timestamp
        $data =~ m/\sIN\s+SOA\s[^\(]+\(.*\s(2\d{9})\s/s;
        $self->{old_timestamp} = $1 if defined $1;
}

sub generate {
        my $self = shift;
        my ($output_file,$selector) = @_;

        dbg "selector=$selector";
        $self->{selector} = $selector;

        dbg "output_file=$output_file";
        $self->{output_file} = $output_file;
        $self->read_old_timestamp;

        my %vars = %{$self->{vars}};

        open(OUT,">$output_file") or die "failed to open '$output_file' for writing\n";

        # read variables
        my $domain    = $vars{domain};
        my $origin    = $vars{origin};
        my $email     = $vars{email};
        $email =~ tr/@/./;
        my $prins     = $self->get_primary_ns;
        my $timestamp = $self->get_timestamp;
        my $mcname    = $vars{multiple_cname} || 0;
        my $ipv4      = $vars{ipv4_zone_word} || 'ipv4';
        my $ipv6      = $vars{ipv6_zone_word} || 'ipv6';


        print OUT <<END
; -- $selector view
\$ORIGIN $origin
\$TTL 1h
$domain       IN  SOA  $prins $email. (
              $timestamp ; serial number of this zone file
              3h         ; slave refresh
              1h         ; slave retry time in case of a problem
              4w         ; slave expiration time
              1h         ; minimum caching time in case of failed lookups
              )
END
        ;

        my $mxnum = 1;
        my %nocnamehosts;
        %nocnamehosts = $self->get_no_cname_hosts_map if $mcname;

        foreach my $host ($self->get_rule_names) {
                dbg "  host=$host";
                my @cnames = ();
                my $use_cname = $mcname && not $nocnamehosts{$host};
                foreach my $fld ($self->get_rule($host)) {
                        dbg "    fld=$fld";
                        if ($host =~ m/^@/) {
                                my $type = uc(substr($host,1));
                                if ($type eq 'MX') {
                                        $type .= " $mxnum";
                                        $mxnum++;
                                }
                                printf OUT "%-20s %-8s   %s\n", "@", $type, "$fld";
                        } elsif ($fld =~ m/\d+\.\d+\.\d+\.\d/) {
                                if ($use_cname) {
                                        printf OUT "%-20s IN A       %s\n", "$host.$ipv4", "$fld";
                                        push @cnames, "$host.$ipv4"
                                } else {
                                        printf OUT "%-20s IN A       %s\n", "$host.$ipv4", "$fld";
                                        printf OUT "%-20s IN A       %s\n", "$host", "$fld";
                                }
                        } elsif ($fld =~ m/([0-9a-f]{0,4}:){2,7}[0-9a-f]{0,4}/) {
                                if ($use_cname) {
                                        printf OUT "%-20s IN AAAA    %s\n", "$host.$ipv6", "$fld";
                                        push @cnames, "$host.$ipv6"
                                } else {
                                        printf OUT "%-20s IN AAAA    %s\n", "$host.$ipv6", "$fld";
                                        printf OUT "%-20s IN AAAA    %s\n", "$host", "$fld";
                                }
                        } else {
                                printf OUT "%-20s CNAME      %s\n", "$host", "$fld";
                        }
                }
                if (@cnames) {
                        foreach my $cn (@cnames) {
                                printf OUT "%-20s CNAME      %s\n", "$host", "$cn";
                        }
                }
        }

        print OUT "\n; --- passthrough lines ---\n" if @{$self->{pass}};
        foreach my $_fld (@{$self->{pass}}) {
                my $fld = $_fld; # avoid modifying the original array
                if ($fld =~ m/=/) {
                        next if $fld !~ m/^$selector=(.*)$/;
                        $fld = $1
                }
                $fld =~ s/^\s*//;
                print OUT "$fld\n";
        }

        close(OUT);
}


# ------------------------------------------------------------------------
# this is the main part of the program
package main;
my $opt_input;
my $opt_output;
my $opt_selector;

my $rc = GetOptions(
        # main options
        'selector=s'=> \$opt_selector,
        'output=s'  => \$opt_output,
        # verbose
        'debug'     => \$debug,
        # help
        'usage'     => sub { pod2usage(-exitval => EXIT_SUCCESS, -verbose => 0) },
        'help'      => sub { pod2usage(-exitval => EXIT_SUCCESS, -verbose => 1) },
);
pod2usage('Invalid options specified.') if !$rc;

( $#ARGV < 0 ) && die "need to specify a metazone file to read.\n";
( $#ARGV > 0 ) && die "too many options; only one metazone file please.\n";
$opt_input = $ARGV[0];

#$::RD_TRACE = 1;
$::RD_HINT = 1;

my $mz = MetaZone->new();
$mz->parse($opt_input);

$mz->dump() if $debug;

if (not defined $opt_output) {
        my $dom = $mz->{vars}->{domain};
        my $sel = "";
        $sel = ".$opt_selector" if defined $opt_selector;
        $opt_output = "${dom}${sel}.zone"
}

$mz->generate($opt_output, $opt_selector);

